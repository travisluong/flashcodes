[
  {
    "front": "Perform case-insensitive matching",
    "back": "i"
  },
  {
    "front": "",
    "back": "g"
  },
  {
    "front": "Find any character between the brackets",
    "back": "[abc]"
  },
  {
    "front": "Find any character not between the brackets",
    "back": "[^abc]"
  },
  {
    "front": "Find a single character, except newline or line terminator",
    "back": "."
  },
  {
    "front": "Find a word character",
    "back": "\\w"
  },
  {
    "front": "Find a non-word character",
    "back": "\\W"
  },
  {
    "front": "Find a digit",
    "back": "\\d"
  },
  {
    "front": "Find a non-digit character",
    "back": "\\D"
  },
  {
    "front": "Find a whitespace character",
    "back": "\\s"
  },
  {
    "front": "Find a non-whitespace character",
    "back": "\\S"
  },
  {
    "front": "Find a match at the beginning/end of a word",
    "back": "\\b"
  },
  {
    "front": "Find a match not at the beginning/end of a word",
    "back": "\\B"
  },
  {
    "front": "Find a new line character",
    "back": "\\n"
  },
  {
    "front": "Find the character specified by an octal number xxx",
    "back": "\\xxx"
  },
  {
    "front": "Find the character specified by a hexadecimal number dd",
    "back": "\\xdd"
  },
  {
    "front": "Find the Unicode character specified by a hexadecimal number xxxx",
    "back": "\\uxxxx"
  },
  {
    "front": "Matches any string that contains at least one n",
    "back": "n+"
  },
  {
    "front": "Matches any string that contains zero or more occurrences of n",
    "back": "n*"
  },
  {
    "front": "Matches any string that contains zero or one occurrences of n",
    "back": "n?"
  },
  {
    "front": "Matches any string that contains a sequence of X n's",
    "back": "n{X}"
  },
  {
    "front": "Matches any string that contains a sequence of X to Y n's",
    "back": "n{X,Y}"
  },
  {
    "front": "Matches any string that contains a sequence of at least X n's",
    "back": "n{X,}"
  },
  {
    "front": "Matches any string with n at the end of it",
    "back": "n$"
  },
  {
    "front": "Matches any string with n at the beginning of it",
    "back": "^n"
  },
  {
    "front": "Matches any string that is followed by a specific string n",
    "back": "?=n"
  },
  {
    "front": "Matches any string that is not followed by a specific string n",
    "back": "?!n"
  },
  {
    "front": "Specifies if the ",
    "back": "global"
  },
  {
    "front": "Specifies if the ",
    "back": "ignoreCase"
  },
  {
    "front": "The index at which to start the next match",
    "back": "lastIndex"
  },
  {
    "front": "Specifies if the ",
    "back": "multiline"
  },
  {
    "front": "The text of the RegExp pattern",
    "back": "source"
  },
  {
    "front": "Tests for a match in a string. Returns the first match",
    "back": "exec()"
  },
  {
    "front": "Tests for a match in a string. Returns true or false",
    "back": "test()"
  }
]
